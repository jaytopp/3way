import React, { useState } from 'react';
import { Lightbulb, Zap, Target, Users, Rocket, RefreshCw, Copy, Download } from 'lucide-react';

const CoachIdeaBot = () => {
  const [activeMode, setActiveMode] = useState('quick');
  const [topic, setTopic] = useState('');
  const [clientType, setClientType] = useState('');
  const [challenge, setChallenge] = useState('');
  const [generatedIdeas, setGeneratedIdeas] = useState([]);
  const [isGenerating, setIsGenerating] = useState(false);
  const [isCompact, setIsCompact] = useState(false);

  const ideaModes = [
    { id: 'quick', name: 'Quick Spark', icon: Zap, desc: 'Fast creative ideas' },
    { id: 'strategic', name: 'Strategic Deep-dive', icon: Target, desc: 'Comprehensive solutions' },
    { id: 'client', name: 'Client-focused', icon: Users, desc: 'Tailored to client needs' },
    { id: 'innovation', name: 'Innovation Lab', icon: Rocket, desc: 'Breakthrough concepts' }
  ];

  const quickIdeaPrompts = [
    "What if your client's biggest weakness became their superpower?",
    "How would a 10-year-old solve this challenge?",
    "What would the opposite approach look like?",
    "If money wasn't a factor, what would you try?",
    "What's the smallest step that could create the biggest impact?",
    "How would your client's hero handle this situation?",
    "What if this problem was actually the solution to something else?",
    "What would happen if you removed all the rules?",
    "How could you turn this challenge into a game?",
    "What would success look like in 10 years from now?"
  ];

  const strategicFrameworks = [
    "SWOT-based Innovation: Turn weaknesses into opportunities",
    "Blue Ocean Strategy: Create uncontested market space",
    "Design Thinking: Empathize → Define → Ideate → Prototype",
    "Jobs-to-be-Done: What job is your client really trying to get done?",
    "Systems Thinking: How does this connect to the bigger picture?",
    "Lean Startup: Build → Measure → Learn approach",
    "OKR Framework: Objectives and Key Results alignment",
    "Value Proposition Canvas: What creates real value?"
  ];

  const clientFocusedApproaches = [
    "Map their customer journey and find friction points",
    "Identify their core values and build solutions around them",
    "Look at their success patterns and amplify them",
    "Find their energy drains and eliminate them",
    "Discover their natural talents and leverage them",
    "Examine their network and unlock hidden connections",
    "Study their decision-making process and optimize it",
    "Analyze their time allocation and redistribute it"
  ];

  const innovationTechniques = [
    "SCAMPER Method: Substitute, Combine, Adapt, Modify, Put to other use, Eliminate, Reverse",
    "Six Thinking Hats: Explore from multiple perspectives",
    "Biomimicry: What would nature do?",
    "Cross-industry Innovation: Apply solutions from other sectors",
    "Constraint Addition: Add limitations to spark creativity",
    "Random Word Association: Connect unrelated concepts",
    "Future-back Thinking: Start from the ideal future",
    "Paradoxical Thinking: Embrace contradictions"
  ];

  const generateIdeas = () => {
    setIsGenerating(true);
    
    setTimeout(() => {
      let ideas = [];
      
      switch(activeMode) {
        case 'quick':
          ideas = quickIdeaPrompts.sort(() => 0.5 - Math.random()).slice(0, 5);
          break;
        case 'strategic':
          ideas = strategicFrameworks.sort(() => 0.5 - Math.random()).slice(0, 4);
          break;
        case 'client':
          ideas = clientFocusedApproaches.sort(() => 0.5 - Math.random()).slice(0, 4);
          break;
        case 'innovation':
          ideas = innovationTechniques.sort(() => 0.5 - Math.random()).slice(0, 4);
          break;
      }
      
      // Add context-aware ideas based on inputs
      if (topic || clientType || challenge) {
        const contextualIdeas = generateContextualIdeas();
        ideas = [...ideas, ...contextualIdeas];
      }
      
      setGeneratedIdeas(ideas);
      setIsGenerating(false);
    }, 1500);
  };

  const generateContextualIdeas = () => {
    const contextual = [];
    
    if (topic) {
      contextual.push(`How might we revolutionize the "${topic}" space for your clients?`);
      contextual.push(`What if "${topic}" was taught completely differently?`);
    }
    
    if (clientType) {
      contextual.push(`Design a signature methodology specifically for ${clientType}`);
      contextual.push(`Create a ${clientType} success accelerator program`);
    }
    
    if (challenge) {
      contextual.push(`Flip the challenge: How could "${challenge}" become an advantage?`);
      contextual.push(`Break down "${challenge}" into 3 smaller, solvable pieces`);
    }
    
    return contextual.slice(0, 2);
  };

  const copyIdeas = () => {
    const text = generatedIdeas.join('\n\n');
    navigator.clipboard.writeText(text);
  };

  const exportIdeas = () => {
    const text = `Coach Idea Generation Session\n${'='.repeat(35)}\n\nMode: ${ideaModes.find(m => m.id === activeMode)?.name}\nTopic: ${topic || 'Not specified'}\nClient Type: ${clientType || 'Not specified'}\nChallenge: ${challenge || 'Not specified'}\n\nGenerated Ideas:\n${generatedIdeas.map((idea, i) => `${i + 1}. ${idea}`).join('\n\n')}\n\nGenerated on: ${new Date().toLocaleString()}`;
    
    const blob = new Blob([text], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `coach-ideas-${Date.now()}.txt`;
    a.click();
  };

  const currentMode = ideaModes.find(m => m.id === activeMode);

  return (
    <div className="max-w-4xl mx-auto p-4 bg-gradient-to-br from-blue-50 to-purple-50" style={{minHeight: isCompact ? 'auto' : '100vh'}}>
      {/* Compact Toggle for Embedding */}
      <div className="flex justify-end mb-2">
        <button
          onClick={() => setIsCompact(!isCompact)}
          className="text-xs px-2 py-1 bg-gray-200 hover:bg-gray-300 rounded text-gray-600"
        >
          {isCompact ? 'Expand' : 'Compact'}
        </button>
      </div>

      {/* Header */}
      <div className={`text-center ${isCompact ? 'mb-4' : 'mb-8'}`}>
        <div className="flex items-center justify-center mb-2">
          <Lightbulb className={`${isCompact ? 'w-6 h-6' : 'w-8 h-8'} text-yellow-500 mr-2`} />
          <h1 className={`${isCompact ? 'text-xl' : 'text-3xl'} font-bold text-gray-800`}>Coach Idea Bot</h1>
          <span className="ml-2 px-2 py-1 bg-orange-100 text-orange-800 text-xs rounded-full">BETA</span>
        </div>
        {!isCompact && (
          <p className="text-gray-600">Generate breakthrough ideas to transform your coaching practice</p>
        )}
      </div>

      {/* Mode Selection */}
      <div className={`grid ${isCompact ? 'grid-cols-4 gap-2 mb-4' : 'grid-cols-2 md:grid-cols-4 gap-4 mb-8'}`}>
        {ideaModes.map((mode) => {
          const Icon = mode.icon;
          return (
            <button
              key={mode.id}
              onClick={() => setActiveMode(mode.id)}
              className={`${isCompact ? 'p-2' : 'p-4'} rounded-lg border-2 transition-all ${
                activeMode === mode.id
                  ? 'border-blue-500 bg-blue-50 text-blue-700'
                  : 'border-gray-200 hover:border-gray-300 bg-white'
              }`}
            >
              <Icon className={`${isCompact ? 'w-4 h-4' : 'w-6 h-6'} mx-auto mb-1`} />
              <div className={`${isCompact ? 'text-xs' : 'text-sm'} font-semibold`}>{mode.name}</div>
              {!isCompact && (
                <div className="text-xs text-gray-500 mt-1">{mode.desc}</div>
              )}
            </button>
          );
        })}
      </div>

      {/* Input Section */}
      <div className={`bg-white rounded-lg ${isCompact ? 'p-4' : 'p-6'} shadow-sm border ${isCompact ? 'mb-4' : 'mb-6'}`}>
        <h3 className={`${isCompact ? 'text-base' : 'text-lg'} font-semibold ${isCompact ? 'mb-3' : 'mb-4'} flex items-center`}>
          <currentMode.icon className="w-5 h-5 mr-2 text-blue-600" />
          {currentMode.name} Setup
        </h3>
        
        <div className={`grid ${isCompact ? 'grid-cols-1 gap-3' : 'md:grid-cols-3 gap-4'}`}>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Topic/Focus Area
            </label>
            <input
              type="text"
              value={topic}
              onChange={(e) => setTopic(e.target.value)}
              placeholder="e.g., Leadership, Sales, Productivity"
              className={`w-full ${isCompact ? 'p-2' : 'p-3'} border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent`}
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Client Type
            </label>
            <input
              type="text"
              value={clientType}
              onChange={(e) => setClientType(e.target.value)}
              placeholder="e.g., Executives, Entrepreneurs, Teams"
              className={`w-full ${isCompact ? 'p-2' : 'p-3'} border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent`}
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Current Challenge
            </label>
            <input
              type="text"
              value={challenge}
              onChange={(e) => setChallenge(e.target.value)}
              placeholder="e.g., Low engagement, Scaling issues"
              className={`w-full ${isCompact ? 'p-2' : 'p-3'} border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent`}
            />
          </div>
        </div>
      </div>

      {/* Generate Button */}
      <div className={`text-center ${isCompact ? 'mb-4' : 'mb-8'}`}>
        <button
          onClick={generateIdeas}
          disabled={isGenerating}
          className={`bg-gradient-to-r from-blue-600 to-purple-600 text-white ${isCompact ? 'px-6 py-3 text-base' : 'px-8 py-4 text-lg'} rounded-lg font-semibold shadow-lg hover:shadow-xl transform hover:scale-105 transition-all disabled:opacity-50 disabled:transform-none`}
        >
          {isGenerating ? (
            <div className="flex items-center">
              <RefreshCw className="w-5 h-5 mr-2 animate-spin" />
              Generating Ideas...
            </div>
          ) : (
            <div className="flex items-center">
              <Lightbulb className="w-5 h-5 mr-2" />
              Generate Big Ideas
            </div>
          )}
        </button>
      </div>

      {/* Results */}
      {generatedIdeas.length > 0 && (
        <div className={`bg-white rounded-lg ${isCompact ? 'p-4' : 'p-6'} shadow-sm border`}>
          <div className={`flex items-center justify-between ${isCompact ? 'mb-4' : 'mb-6'}`}>
            <h3 className={`${isCompact ? 'text-base' : 'text-lg'} font-semibold flex items-center`}>
              <Zap className="w-5 h-5 mr-2 text-yellow-500" />
              Your Generated Ideas
            </h3>
            <div className="flex gap-2">
              <button
                onClick={copyIdeas}
                className={`flex items-center ${isCompact ? 'px-2 py-1 text-xs' : 'px-3 py-2 text-sm'} bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors`}
              >
                <Copy className="w-4 h-4 mr-1" />
                Copy
              </button>
              <button
                onClick={exportIdeas}
                className={`flex items-center ${isCompact ? 'px-2 py-1 text-xs' : 'px-3 py-2 text-sm'} bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors`}
              >
                <Download className="w-4 h-4 mr-1" />
                Export
              </button>
            </div>
          </div>
          
          <div className={`space-y-${isCompact ? '3' : '4'}`}>
            {generatedIdeas.map((idea, index) => (
              <div key={index} className={`${isCompact ? 'p-3' : 'p-4'} bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg border-l-4 border-blue-500`}>
                <div className="flex items-start">
                  <div className={`${isCompact ? 'w-5 h-5 text-xs' : 'w-6 h-6 text-sm'} bg-blue-500 text-white rounded-full flex items-center justify-center font-bold mr-3 mt-0.5`}>
                    {index + 1}
                  </div>
                  <p className={`text-gray-800 flex-1 ${isCompact ? 'text-sm' : ''}`}>{idea}</p>
                </div>
              </div>
            ))}
          </div>
          
          {!isCompact && (
            <div className="mt-6 p-4 bg-yellow-50 rounded-lg border border-yellow-200">
              <p className="text-sm text-yellow-800">
                <strong>💡 Pro Tip:</strong> Use these ideas as conversation starters with your clients, or combine multiple ideas to create unique approaches. Remember, the best ideas often come from building on these initial sparks!
              </p>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default CoachIdeaBot;
